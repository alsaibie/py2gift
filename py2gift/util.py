# AUTOGENERATED! DO NOT EDIT! File to edit: 02_util.ipynb (unless otherwise specified).

__all__ = ['render_latex', 'to_formula_maybe', 'int_to_roman']

# Cell

import pathlib

import IPython.display

# Cell
def render_latex(formula: str) -> str:

    assert formula[0] == '$'

    return IPython.display.Markdown(r'$\Large ' + formula[1:])

# Cell
def to_formula_maybe(func):

    def wrapper(*args, **kwargs):

        if ('to_formula' in kwargs) and (kwargs['to_formula']):

            kwargs.pop('to_formula')

            return f'${func(*args, **kwargs)}$'

        else:

            return func(*args, **kwargs)
    return wrapper

# Cell

# taken from https://www.w3resource.com/python-exercises/class-exercises/python-class-exercise-1.php
def int_to_roman(num: int) -> str:
    """
    Returns an integer number in roman format.
    """

    val = [
        1000, 900, 500, 400,
        100, 90, 50, 40,
        10, 9, 5, 4,
        1
    ]
    syb = [
        "M", "CM", "D", "CD",
        "C", "XC", "L", "XL",
        "X", "IX", "V", "IV",
        "I"
    ]
    roman_num = ''
    i = 0
    while num > 0:
        for _ in range(num // val[i]):
            roman_num += syb[i]
            num -= val[i]
        i += 1
    return roman_num

assert int_to_roman(12) == 'XII'
assert int_to_roman(9) == 'IX'