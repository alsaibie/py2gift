# AUTOGENERATED! DO NOT EDIT! File to edit: 40_input_file.ipynb (unless otherwise specified).

__all__ = ['write_header', 'write_class_preamble', 'write_class_closing', 'function_to_make_hierarchical_category_name']

# Cell

import pathlib
from typing import Union, Optional, Callable

# Cell

def write_header(file: Union[str, pathlib.Path], output_file: str, pictures_directory: str, ) -> None:

    with open(file, 'w') as f:

        f.write(f'output file: {output_file}\n')
        f.write(f'pictures base directory: {pictures_directory}\n')
        f.write("path to gift-wrapper: '~/gift-wrapper/wrap.py'\n")
        f.write('\n')

        f.write('categories:\n')

# Cell

def write_class_preamble(file: Union[str, pathlib.Path], category_name: str, base_category: Optional[str] = None, test_mode: bool = False) -> Union[str, list]:

    # file is *appended* (not overwritten)
    with open(file, 'a') as f:

        f.write('\n')

        if test_mode:

            category_name = 'test'

        else:

            if base_category:

                category_name = [base_category, f'{base_category}/{category_name}']

        f.write(f'  - name: {category_name}\n\n')
        f.write('    classes:\n')

    return category_name

# Cell

def write_class_closing(file: Union[str, pathlib.Path], n_instances: int, time: Optional[int] = None) -> None:

    with open(file, 'a') as f:

        f.write(f'\n        number of instances: {n_instances}')

        if time:

            f.write(f'\n        time: {time}')

# Cell

def function_to_make_hierarchical_category_name(base_category: str) -> Callable[[str], list]:

    def make_subcategory(category: str) -> list:

        return [base_category, f'{base_category}/{category}']

    return make_subcategory