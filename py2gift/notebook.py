# AUTOGENERATED! DO NOT EDIT! File to edit: 60_notebook.ipynb (unless otherwise specified).

__all__ = ['ClassesContainer', 'MyMagics']

# Cell

import argparse

from IPython.core.magic import Magics, magics_class, line_magic, cell_magic, line_cell_magic

import py2gift.input_file

# Cell

class ClassesContainer:

    def add(cls, class_to_add):

        setattr(cls, class_to_add.__name__, class_to_add)

# Cell

# The class MUST call this class decorator at creation time
@magics_class
class MyMagics(Magics):

    statement_key = 'statement'
    feedback_key = 'feedback'

    def __init__(self, shell=None,  **kwargs):

        super().__init__(shell=shell, **kwargs)

#         self.parser = argparse.ArgumentParser(description='write settings')
#         self.parser.add_argument('-n', '--name')

        self.location_parser = argparse.ArgumentParser(description='Specification')
        self.location_parser.add_argument('settings', help='settings variable (dictionary)')

#     def process(self, line, cell, variable):
    def process(self, line, cell, key):

        line_arguments = self.location_parser.parse_args(line.split())

        self.shell.user_ns[line_arguments.settings].store['categories'][-1]['classes'][-1][key] = cell

#         print(line_arguments)

#     @line_magic
#     def lmagic(self, line):

#         "my line magic"
#         print("Full access to the main IPython object:", self.shell)
#         print("Variables in the user namespace:", list(self.shell.user_ns.keys()))

#         line_arguments = self.parser.parse_args(line.split())
#         print(line_arguments)

#         return line

    @cell_magic
    def statement(self, line, cell):

        self.process(line, cell, self.statement_key)

        return f'statement recorded'

    @cell_magic
    def feedback(self, line, cell):

        self.process(line, cell, self.feedback_key)

        return f'feedback recorded'

#     @line_cell_magic
#     def lcmagic(self, line, cell=None):

#         "Magic that works both as %lcmagic and as %%lcmagic"
#         if cell is None:
#             print("Called as line magic")
#             return line
#         else:
#             print("Called as cell magic")
#             return line, cell

# Cell

get_ipython().register_magics(MyMagics)